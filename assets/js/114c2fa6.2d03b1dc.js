(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{64:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return u})),n.d(t,"default",(function(){return d}));var a=n(3),c=n(7),r=(n(0),n(90)),l=["components"],b={},i={unversionedId:"contracts/h00kd_metadata",id:"contracts/h00kd_metadata",isDocsHomePage:!1,title:"H00KD Metadata",description:"- Source Code",source:"@site/docs/contracts/h00kd_metadata.md",sourceDirName:"contracts",slug:"/contracts/h00kd_metadata",permalink:"/contracts/h00kd_metadata",editUrl:"https://github.com/ShardLabs/h00kd-docs/blob/main/docs/contracts/h00kd_metadata.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"H00KD",permalink:"/contracts/h00kd"},next:{title:"Deployed Contracts",permalink:"/deployed-contracts"}},u=[{value:"Initialization Method",id:"initialization-method",children:[{value:"init()",id:"init",children:[]}]},{value:"Change Methods",id:"change-methods",children:[{value:"create_event()",id:"create_event",children:[]},{value:"close_event()",id:"close_event",children:[]},{value:"cancel_event()",id:"cancel_event",children:[]},{value:"add_claim_keys()",id:"add_claim_keys",children:[]},{value:"drop_public_keys()",id:"drop_public_keys",children:[]},{value:"create_account_and_claim",id:"create_account_and_claim",children:[]},{value:"claim()",id:"claim",children:[]},{value:"claim_h00kd()",id:"claim_h00kd",children:[]}]},{value:"View Methods",id:"view-methods",children:[{value:"get_key_balance()",id:"get_key_balance",children:[]},{value:"can_claim_with_public()",id:"can_claim_with_public",children:[]},{value:"get_public_key_event_data()",id:"get_public_key_event_data",children:[]},{value:"get_event_data()",id:"get_event_data",children:[]},{value:"get_owner_event_data()",id:"get_owner_event_data",children:[]},{value:"get_events()",id:"get_events",children:[]},{value:"get_number_of_events_created()",id:"get_number_of_events_created",children:[]},{value:"get_number_of_events_by_owner()",id:"get_number_of_events_by_owner",children:[]},{value:"get_access_key_allowance_amount()",id:"get_access_key_allowance_amount",children:[]},{value:"get_mint_storage_cost_amount()",id:"get_mint_storage_cost_amount",children:[]}]},{value:"Parameters",id:"parameters",children:[]}],o={toc:u};function d(e){var t=e.components,n=Object(c.a)(e,l);return Object(r.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://github.com/Shard-Labs/h00kd-contracts/blob/develop-2.0/h00kd_metadata/src/lib.rs"},"Source Code"))),Object(r.b)("p",null,"H00kd Metadata enables users to create new events, claim all kind of NFTs and create new NEAR accounts."),Object(r.b)("h2",{id:"initialization-method"},"Initialization Method"),Object(r.b)("h3",{id:"init"},"init()"),Object(r.b)("p",null,"Initializes the contract's state by setting the H00KD account id to interact with and the Linkdrop account id to create new accounts."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"#[init]\npub fn init(h00kd_contract: AccountId, linkdrop_contract: AccountId) -> Self\n")),Object(r.b)("h2",{id:"change-methods"},"Change Methods"),Object(r.b)("h3",{id:"create_event"},"create_event()"),Object(r.b)("p",null,'Creates a new event by storing some of the event data and minting tho so called "genesis token".'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"#[payable]\npub fn create_event(\n    &mut self,\n    event_uri: String,\n    token_metadata: TokenMetadata,\n    event_starts: u64,\n    event_ends: u64,\n) -> Promise\n")),Object(r.b)("h3",{id:"close_event"},"close_event()"),Object(r.b)("p",null,"Closes a given event if the conditions are fullfiled. All remaining deposit is returned to the event owner"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn close_event(&mut self, event_id: u64)\n")),Object(r.b)("h3",{id:"cancel_event"},"cancel_event()"),Object(r.b)("p",null,"Cancels a given event if the conditions are fullfiled. All deposit is returned to the event owner."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn cancel_event(&mut self, event_id: u64)\n")),Object(r.b)("h3",{id:"add_claim_keys"},"add_claim_keys()"),Object(r.b)("p",null,"Enables event owners to add public keys as function access keys to the contract."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"#[payable]\npub fn add_claim_keys(\n    &mut self,\n    public_keys: Vec<PublicKey>,\n    pk_attributes: PublicKeyAttributes,\n    is_create_account: bool,\n)\n")),Object(r.b)("h3",{id:"drop_public_keys"},"drop_public_keys()"),Object(r.b)("p",null,"Removes public keys from the contract's access key register."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn drop_public_keys(&mut self, event_id: u64, public_keys: Vec<PublicKey>)\n")),Object(r.b)("h3",{id:"create_account_and_claim"},"create_account_and_claim"),Object(r.b)("p",null,"Allows users to create a new NEAR account and claim an NFT using their new account id."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn create_account_and_claim(\n    &mut self,\n    new_account_id: AccountId,\n    new_public_key: PublicKey,\n) -> Promise\n")),Object(r.b)("h3",{id:"claim"},"claim()"),Object(r.b)("p",null,"Enables users to claim an NFT to their account id from NEAR Wallet."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn claim(&mut self, account_id: AccountId) -> Promise\n")),Object(r.b)("h3",{id:"claim_h00kd"},"claim_h00kd()"),Object(r.b)("p",null,"Enables users to claim an NFT to their account id from H00KD."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn claim_h00kd(&mut self, account_id: AccountId) -> Promise\n")),Object(r.b)("h2",{id:"view-methods"},"View Methods"),Object(r.b)("h3",{id:"get_key_balance"},"get_key_balance()"),Object(r.b)("p",null,"Returns the balance associated with the public key"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn get_key_balance(&self, key: PublicKey) -> U128\n")),Object(r.b)("h3",{id:"can_claim_with_public"},"can_claim_with_public()"),Object(r.b)("p",null,"Checks if public key can be used to claim. Returns the public key contract attributes."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn can_claim_with_public(&self, public_key: &PublicKey) -> Option<PublicKeyAttributes>\n")),Object(r.b)("h3",{id:"get_public_key_event_data"},"get_public_key_event_data()"),Object(r.b)("p",null,"Returns an event data structure associated to the given public key."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn get_public_key_event_data(&self, public_key: PublicKey) -> EventData\n")),Object(r.b)("h3",{id:"get_event_data"},"get_event_data()"),Object(r.b)("p",null,"Returns an event data structure associated to the given event id."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn get_event_data(&self, event_id: u64) -> EventData\n")),Object(r.b)("h3",{id:"get_owner_event_data"},"get_owner_event_data()"),Object(r.b)("p",null,"Returns a list of events owned by the given account id."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn get_owner_event_data(\n    &self,\n    owner_account_id: AccountId,\n    from_index: Option<U128>,\n    limit: Option<u64>,\n) -> Vec<(u64, EventData)>\n")),Object(r.b)("h3",{id:"get_events"},"get_events()"),Object(r.b)("p",null,"Returns a list of event data."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn get_events(\n    &self,\n    from_index: Option<U128>,\n    limit: Option<u64>,\n) -> Vec<(u64, EventData)>\n")),Object(r.b)("h3",{id:"get_number_of_events_created"},"get_number_of_events_created()"),Object(r.b)("p",null,"Returns the total number of events created since deployment."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn get_number_of_events_created(&self) -> u64\n")),Object(r.b)("h3",{id:"get_number_of_events_by_owner"},"get_number_of_events_by_owner()"),Object(r.b)("p",null,"Returns the total number of events owned by a given account id."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn get_number_of_events_by_owner(&self, account_id: AccountId) -> u64\n")),Object(r.b)("h3",{id:"get_access_key_allowance_amount"},"get_access_key_allowance_amount()"),Object(r.b)("p",null,"Returns the access key allowance set by the contract."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn get_access_key_allowance_amount(&self) -> (U128, U128)\n")),Object(r.b)("h3",{id:"get_mint_storage_cost_amount"},"get_mint_storage_cost_amount()"),Object(r.b)("p",null,"Returns the mint storage amount set by the contract."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"pub fn get_mint_storage_cost_amount(&self) -> U128\n")),Object(r.b)("h2",{id:"parameters"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Name"),Object(r.b)("th",{parentName:"tr",align:null},"Type"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"event_uri"),Object(r.b)("td",{parentName:"tr",align:null},"String"),Object(r.b)("td",{parentName:"tr",align:null},"Hash event data on IPFS identifier")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"token_metadata"),Object(r.b)("td",{parentName:"tr",align:null},"TokenMetadata"),Object(r.b)("td",{parentName:"tr",align:null},"Contract metadata description according to NEP-171")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"event_starts"),Object(r.b)("td",{parentName:"tr",align:null},"u64"),Object(r.b)("td",{parentName:"tr",align:null},"Event's starting date in nanoseconds from epoch")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"event_ends"),Object(r.b)("td",{parentName:"tr",align:null},"u64"),Object(r.b)("td",{parentName:"tr",align:null},"Event's ending date in nanoseconds from epoch")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"event_id"),Object(r.b)("td",{parentName:"tr",align:null},"u64"),Object(r.b)("td",{parentName:"tr",align:null},"Event unique identifier")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"public_keys"),Object(r.b)("td",{parentName:"tr",align:null},"Vector(PublicKey)"),Object(r.b)("td",{parentName:"tr",align:null},"List of public keys")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"pk_attributes"),Object(r.b)("td",{parentName:"tr",align:null},"PublicKeyAttributes"),Object(r.b)("td",{parentName:"tr",align:null},"Structure containing public key attributes as event id and attached amount")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"is_create_account"),Object(r.b)("td",{parentName:"tr",align:null},"bool"),Object(r.b)("td",{parentName:"tr",align:null},"Indicates if the a public key will be used to create a new NEAR account")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"new_account_id"),Object(r.b)("td",{parentName:"tr",align:null},"AccountId"),Object(r.b)("td",{parentName:"tr",align:null},"New account to be created using the Linkdrop contract")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"new_public_key"),Object(r.b)("td",{parentName:"tr",align:null},"PublicKey"),Object(r.b)("td",{parentName:"tr",align:null},"New public key associated to the new account id")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"account_id"),Object(r.b)("td",{parentName:"tr",align:null},"AccountId"),Object(r.b)("td",{parentName:"tr",align:null},"NEAR account id")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"public_key"),Object(r.b)("td",{parentName:"tr",align:null},"PublicKey"),Object(r.b)("td",{parentName:"tr",align:null},"NEAR public key")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"owner_account_id"),Object(r.b)("td",{parentName:"tr",align:null},"AccountId"),Object(r.b)("td",{parentName:"tr",align:null},"Event owner account id")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"from_index"),Object(r.b)("td",{parentName:"tr",align:null},"U128"),Object(r.b)("td",{parentName:"tr",align:null},"Start index")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"limit"),Object(r.b)("td",{parentName:"tr",align:null},"u64"),Object(r.b)("td",{parentName:"tr",align:null},"End index")))))}d.isMDXComponent=!0},90:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return _}));var a=n(0),c=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,c=function(e,t){if(null==e)return{};var n,a,c={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var u=c.a.createContext({}),o=function(e){var t=c.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},d=function(e){var t=o(e.components);return c.a.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},p=c.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=o(n),p=a,_=d["".concat(l,".").concat(p)]||d[p]||s[p]||r;return n?c.a.createElement(_,b(b({ref:t},u),{},{components:n})):c.a.createElement(_,b({ref:t},u))}));function _(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=p;var b={};for(var i in t)hasOwnProperty.call(t,i)&&(b[i]=t[i]);b.originalType=e,b.mdxType="string"==typeof e?e:a,l[1]=b;for(var u=2;u<r;u++)l[u]=n[u];return c.a.createElement.apply(null,l)}return c.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);