(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{83:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),c=(n(0),n(95)),o=["components"],l={},i={unversionedId:"contracts/h00kd",id:"contracts/h00kd",isDocsHomePage:!1,title:"H00KD",description:"- Source Code",source:"@site/docs/contracts/h00kd.md",sourceDirName:"contracts",slug:"/contracts/h00kd",permalink:"/contracts/h00kd",editUrl:"https://github.com/ShardLabs/h00kd-docs/blob/main/docs/contracts/h00kd.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Subgraph",permalink:"/technical_reference/subgraph"},next:{title:"H00KD Metadata",permalink:"/contracts/h00kd_metadata"}},d=[{value:"Initialization Method",id:"initialization-method",children:[{value:"init()",id:"init",children:[]}]},{value:"Change Methods",id:"change-methods",children:[{value:"mint_nft()",id:"mint_nft",children:[]},{value:"clone_nft()",id:"clone_nft",children:[]},{value:"account_created_and_clone()",id:"account_created_and_clone",children:[]}]},{value:"View Methods",id:"view-methods",children:[{value:"nft_metadata()",id:"nft_metadata",children:[]},{value:"get_accounts()",id:"get_accounts",children:[]},{value:"get_tokens_metadata()",id:"get_tokens_metadata",children:[]}]},{value:"Parameters",id:"parameters",children:[]}],b={toc:d};function u(e){var t=e.components,n=Object(r.a)(e,o);return Object(c.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"https://github.com/Shard-Labs/h00kd-contracts/blob/develop-2.0/h00kd/src/lib.rs"},"Source Code"))),Object(c.b)("p",null,"Contract that implements ",Object(c.b)("a",{parentName:"p",href:"https://github.com/near/NEPs/blob/master/neps/nep-0171.md"},"NEP-171")," standard and clone functionalities for storage saveing purpose. H00kd contract contains all the minted and cloned NFTs."),Object(c.b)("h2",{id:"initialization-method"},"Initialization Method"),Object(c.b)("h3",{id:"init"},"init()"),Object(c.b)("p",null,"Initializes the contract's state by setting an admin account id, contract metadata and a contract to interact with."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rust"},"#[init]\npub fn init(metadata_contract: AccountId) -> Self\n")),Object(c.b)("h2",{id:"change-methods"},"Change Methods"),Object(c.b)("h3",{id:"mint_nft"},"mint_nft()"),Object(c.b)("p",null,"Mint a new NFT token only if the transaction predecessor is the Admin of the contract or the contract set to interact with."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rust"},"#[payable]\npub fn nft_mint(&mut self, token_metadata: TokenMetadata) -> Token\n")),Object(c.b)("h3",{id:"clone_nft"},"clone_nft()"),Object(c.b)("p",null,"Clones a given token id into a new NFT. The new NFT will have the same metadata but different token id."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rust"},"#[payable]\npub fn nft_clone(&mut self, clone_from_id: TokenId, token_owner_id: AccountId) -> Token\n")),Object(c.b)("h3",{id:"account_created_and_clone"},"account_created_and_clone()"),Object(c.b)("p",null,"Clones a given token id int a new NFT when the owner id is a new created NEAR account."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rust"},"#[payable]\npub fn account_created_and_clone(\n    &mut self,\n    clone_from_id: TokenId,\n    token_owner_id: AccountId,\n) -> Token\n")),Object(c.b)("h2",{id:"view-methods"},"View Methods"),Object(c.b)("h3",{id:"nft_metadata"},"nft_metadata()"),Object(c.b)("p",null,"Returns H00kd Contract Metadata"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rust"},"pub fn nft_metadata(&self) -> NFTContractMetadata\n")),Object(c.b)("h3",{id:"get_accounts"},"get_accounts()"),Object(c.b)("p",null,"Returns a list of account ids that have claimed a h00kd."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rust"},"pub fn get_accounts(&self, genesis_token: TokenId) -> Option<Vec<AccountId>>\n")),Object(c.b)("h3",{id:"get_tokens_metadata"},"get_tokens_metadata()"),Object(c.b)("p",null,"Returns a list of Token Metadata for each token id provided as argument."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rust"},"pub fn get_tokens_metadata(&self, tokens_id: Vec<TokenId>) -> Vec<TokenMetadata>\n")),Object(c.b)("h2",{id:"parameters"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null},"Name"),Object(c.b)("th",{parentName:"tr",align:null},"Type"),Object(c.b)("th",{parentName:"tr",align:null},"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"metadata_contract"),Object(c.b)("td",{parentName:"tr",align:null},"AccountId"),Object(c.b)("td",{parentName:"tr",align:null},"Contract account id that interacts with H00kd")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"token_metadata"),Object(c.b)("td",{parentName:"tr",align:null},"TokenMetadata"),Object(c.b)("td",{parentName:"tr",align:null},"Metadata structure for NEP-171 contracts")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"clone_from_id"),Object(c.b)("td",{parentName:"tr",align:null},"TokenId"),Object(c.b)("td",{parentName:"tr",align:null},"Token identifier used to clone into a new token")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"token_owner_id"),Object(c.b)("td",{parentName:"tr",align:null},"AccountId"),Object(c.b)("td",{parentName:"tr",align:null},"New NFT minted/cloned owner account")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"genesis_token"),Object(c.b)("td",{parentName:"tr",align:null},"TokenId"),Object(c.b)("td",{parentName:"tr",align:null},"Token identifier used to clone into a new token")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"tokens_id"),Object(c.b)("td",{parentName:"tr",align:null},"Vector(AccountId)"),Object(c.b)("td",{parentName:"tr",align:null},"List of token ids")))))}u.isMDXComponent=!0},95:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),b=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=b(n),p=a,m=u["".concat(o,".").concat(p)]||u[p]||s[p]||c;return n?r.a.createElement(m,l(l({ref:t},d),{},{components:n})):r.a.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<c;d++)o[d]=n[d];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);